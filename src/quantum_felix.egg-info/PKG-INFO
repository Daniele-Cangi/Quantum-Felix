Metadata-Version: 2.4
Name: quantum-felix
Version: 0.1.0
Summary: Scenario & Strategy Simulation Engine (Research Preview)
Author: Daniele Cangi
License-Expression: Apache-2.0
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# ⚡ Quantum Felix — Scenario & Strategy Simulation Engine  

[![Python](https://img.shields.io/badge/python-3.11%2B-blue.svg?logo=python)](https://www.python.org/)  
[![Status](https://img.shields.io/badge/status-Research--Preview-orange)]()  
[![License: Apache 2.0](https://img.shields.io/badge/License-Apache_2.0-green.svg)](./LICENSE)  
[![Contributions Welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg)](./CONTRIBUTING.md)  

**Quantum Felix** is an **experimental simulation and orchestration engine** designed for **multi-scenario testing, large-scale backtesting, and strategy optimization**.  
It is currently in a **Research Preview** stage — functional, but still being structured and systematized.  

---

## ✨ Key Features (in progress)  

- 🔁 **Scenario Factory**  
  - Realistic + synthetic trajectories  
  - Regime switching, shocks, and drift injection  

- 🧪 **Backtesting & Stress Testing**  
  - Walk-forward analysis  
  - Multi-seed Monte Carlo sweeps  
  - τ-sweep regime exploration  

- 🧭 **Strategy Orchestration**  
  - Plug-in Strategy API (under development)  
  - Support for rule-based, ML, or hybrid policies  

- 🧯 **Cost & Risk Profiling**  
  - Transaction fee, spread, slippage models  
  - Latency and memory profiling (planned)  

- 📊 **Metrics & Reporting**  
  - PnL, Sharpe/Sortino, Drawdown, Stability Index  
  - JSON/CSV summaries, HTML reports (WIP)  

- 🧩 **Integration with AstroMind-4D (planned)**  
  - Use AstroMind outputs as **policy signals**  
  - Apply MetaSentinel gating for risk control  

---

## 🧩 Architecture (Conceptual)  

```mermaid
flowchart TD
    D[Data Loader] --> S[Scenario Engine]
    S --> R[Runtime Executor]
    R --> E[Evaluator & Metrics]
    E --> O[Optimizer]
    O --> REP[Reporter]

    subgraph Scenario Engine
        SYN[Synthetic Generator] --> S
        REAL[Realistic Ingest] --> S
        REG[Regime Switcher] --> S
    end

    subgraph Runtime Executor
        STRAT[Strategy API] --> R
    end
```

---

## 🐈 Quantum Early Stopping (Unique Approach)  

One of the most distinctive features of **Quantum Felix** is its **probabilistic “quantum-inspired” approach** to managing early stopping and overfitting:  

- **Unique Method** → Instead of deterministic thresholds, Quantum Felix uses a metaphor of **quantum state collapse** to decide when to stop or continue training.  

- **Core Concepts**:  
  - `psi_alive` / `psi_dead` represent the **probability amplitudes** of the system being in a *continue* vs *stop* state.  
  - `cat_fidelity` measures how well the current trajectory aligns with the best past states.  
  - Probabilities are updated dynamically based on **fidelity** and **observed improvement**.  

- **Why it helps**:  
  - Avoids **premature stopping**, allowing models to explore potential performance gains.  
  - Provides a **softer, probabilistic decision rule** instead of a hard cutoff.  

- **Challenges**:  
  - The effectiveness depends on how well `fidelity` and `improvement` reflect actual training progress.  
  - Debugging and tuning can be harder than with deterministic early stopping.  

- **In summary**: This is a **creative and unconventional experiment**. If effective, it could provide a new way to manage **training robustness and resilience** in ML pipelines.  

### 🧭 Flow Diagram  

```mermaid
flowchart TD
    A[Start Training Epoch t] --> B[Compute validation metrics]
    B --> C[Compute improvement Δ and fidelity F]
    C --> D[Update amplitudes ψ_alive, ψ_dead]
    D --> E[Normalize amplitudes (|ψ|^2 = 1)]
    E --> F{Decision rule}
    F -->|Sample / Threshold| G[Collapse to state]
    G -->|ψ_dead| H[STOP training]
    G -->|ψ_alive| I[CONTINUE training]
    I --> J[Proceed to epoch t+1]
    H --> K[Save best model / finalize]
    
    subgraph Update Equations (conceptual)
        U1[ψ_alive ← ψ_alive + α·g(F, Δ)] --> U3[softclip]
        U2[ψ_dead  ← ψ_dead  + β·h(F, Δ)] --> U3
    end

    C -.-> U1
    C -.-> U2
    U3 -.-> D
```

### 🐱 Schrödinger’s Cat Analogy  

The idea of *Quantum Early Stopping* is inspired by Schrödinger’s famous thought experiment:  
- A cat inside a box is **both alive and dead** until observed.  
- Its state is represented by a **superposition** of two probability amplitudes.  

In Quantum Felix:  
- `psi_alive` = amplitude of the model being in the *continue training* state.  
- `psi_dead` = amplitude of the model being in the *stop training* state.  
- As training progresses, these amplitudes are updated based on **fidelity** (how consistent the current run is with the best past) and **improvement** (measured progress).  
- At each step, the algorithm performs a **“collapse”** — sampling or thresholding to decide whether training continues or halts.  

👉 This probabilistic framing allows the system to **delay premature stopping**, while still converging when evidence accumulates that improvement has plateaued.  

---

## 📖 Why It Matters  

Simulation frameworks often trade off between **flexibility** and **realism**.  
Quantum Felix aims to provide:  
- **Scenario diversity** → synthetic + realistic mixing  
- **Systematic evaluation** → sweeps, multi-seeds, robust metrics  
- **Auditability** → configs, seeds, and results stored for reproducibility  

This makes it useful for **finance, IoT, robotics, energy, and anomaly detection**, where strategies must be validated under uncertainty and stress.  

---

## 🌍 Example Use Cases  

- 📈 **Finance & Trading** — backtest strategies with realistic cost models and stress tests.  
- ⚡ **Energy & IoT** — demand/load simulations with drift and anomaly injection.  
- 🏭 **Industrial Control** — predictive maintenance with multi-scenario simulations.  
- 🤖 **Robotics** — what-if testing of policies under uncertainty and latency constraints.  
- 🛡️ **Cybersecurity** — anomaly simulation and robust response evaluation.  

---

## 📂 Repository Structure (planned)  

```
quantum-felix/
├─ felix/
│  ├─ data/         # data loaders & validators
│  ├─ scenarios/    # synthetic + realistic generators
│  ├─ strategies/   # strategy API + examples
│  ├─ runtime/      # executor & orchestration
│  ├─ evaluate/     # metrics & risk evaluation
│  ├─ optimize/     # parameter sweeps, optimization
│  └─ report/       # exporters (CSV, JSON, HTML)
├─ configs/         # YAML presets
├─ scripts/         # CLI tools
├─ examples/        # notebooks and demos
├─ tests/
├─ README.md
├─ LICENSE
└─ requirements.txt
```

---

## ⚙️ Quickstart (WIP)  

```bash
# Install dependencies
pip install -r requirements.txt

# Run a simple scenario backtest (WIP)
python scripts/run_backtest.py --config configs/example.yaml --strategy mean_revert.yaml
```

---

## 🚧 Status  

This project is **Work in Progress**:  
- ✅ Core ideas implemented (scenarios, sweeps, cost models)  
- 🛠️ Modularization in progress (Strategy API, reporting)  
- 🔮 Planned integrations (AstroMind-4D bridge, HTML reports)  

---

## 🤝 Contributing  

Contributions are welcome, especially in:  
- Modular **Strategy API** design  
- Extended **metrics & reporting**  
- Domain-specific scenarios (finance, robotics, energy)  

---

## 📜 License  

This project is licensed under the **Apache License 2.0**.  
See [LICENSE](./LICENSE) for details.  
